cmake_minimum_required(VERSION 3.12)

cmake_policy(SET CMP0074 NEW)

project(externalLib)
include(ExternalProject)

set(USE_MPI OFF)
set(MPI_FOUND OFF)
set(USE_OMP ON)
set(USE_OCL OFF)
set(EXTERNAL_BUILD_THREADS 10 CACHE STRING "Build vars")

#these should always be built and downloaded

ExternalProject_Add(
    sparsehash
    GIT_REPOSITORY https://github.com/sparsehash/sparsehash.git
    INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/sparsehash

    CONFIGURE_COMMAND bash  <SOURCE_DIR>/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/sparsehash-prefix/src/sparsehash/configure  CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/sparsehash
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 1
    )

if(USE_TCMALLOC)
    ExternalProject_Add(
        gperftools
        GIT_REPOSITORY https://github.com/gperftools/gperftools
        INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/gperftools

        CONFIGURE_COMMAND bash  <SOURCE_DIR>/autogen.sh COMMAND   ${CMAKE_BINARY_DIR}/lib/gperftools-prefix/src/gperftools/configure CPPFLAGS=-D_XOPEN_SOURCE=1 --prefix=${CMAKE_BINARY_DIR}/lib/gperftools
        UPDATE_COMMAND ""
        BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
            )
endif()

ExternalProject_Add(
    eigen3
    URL http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/eigen3 -DINCLUDE_INSTALL_DIR=${CMAKE_BINARY_DIR}/lib/eigen3
    UPDATE_COMMAND ""
    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
    INSTALL_COMMAND make install
    BUILD_IN_SOURCE 0
    )

#GDAL depends on this. If we are building proj4, we need to turn off the VTK proj4

if(BUILD_PROJ4)
    ExternalProject_Add(
    	proj4
        URL http://download.osgeo.org/proj/proj-4.9.3.tar.gz
        UPDATE_COMMAND ""
        CONFIGURE_COMMAND bash  <SOURCE_DIR>/configure --prefix=${CMAKE_BINARY_DIR}/lib/proj4
        BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
    )

endif()

if(BUILD_VTK)
     ExternalProject_Add(
	    VTK
	    DEPENDS proj4
	    URL http://www.vtk.org/files/release/8.1/VTK-8.1.1.tar.gz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/VTK -DCMAKE_BUILD_TYPE=Release
	                -DVTK_USE_SYSTEM_libproj4=ON
	                -DLIBPROJ4_LIBRARIES=${CMAKE_BINARY_DIR}/lib/proj4/lib/libproj.so -DLIBPROJ4_INCLUDE_DIR=${CMAKE_BINARY_DIR}/lib/proj4/include
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_FUNC)
    ExternalProject_Add(
        func
        GIT_REPOSITORY https://github.com/uofs-simlab/func.git
        UPDATE_COMMAND ""
        CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/func
        BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
        INSTALL_COMMAND make install
        BUILD_IN_SOURCE 1
        )
endif()

#Paraview (<=5.1.2  -- unsure on 5.5+) still needs to build it's own VTK.
# Since we have to carefully build VTK to avoid netcdf/proj4 compatibility issues, it is best to just let PV do its own thing
#https://public.kitware.com/pipermail/paraview/2016-August/037922.html
#Super build would be nice to use, however it doesn't compile if within a git sub-tree. Unsure how to work around this.
if(BUILD_ParaView)

     ExternalProject_Add(
	    ParaView
        #5.4.1 is what is on Graham
	    URL https://www.paraview.org/paraview-downloads/download.php?submit=Download&version=v5.4&type=source&os=Sources&downloadFile=ParaView-v5.4.1.tar.gz

	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DMACOSX_APP_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/ParaView
	                -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/ParaView
	                -DCMAKE_BUILD_TYPE=Release
	                -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
	                -DCMAKE_PREFIX_PATH=/usr/local/opt/qt    #$(brew --prefix qt5)
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    PATCH_COMMAND patch -p1  < ${CMAKE_BINARY_DIR}/paraview-5.4.1.patch
	    BUILD_IN_SOURCE 0
	 )

	#build the datetime filter
	#this uses
    ExternalProject_Add(
    	    vtk-timefilter
            DEPENDS ParaView

    	    GIT_REPOSITORY https://github.com/Chrismarsh/vtk-paraview-datetimefilter.git

            CMAKE_ARGS  -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/vtk-datetime-filter
                        -DParaView_DIR=${CMAKE_BINARY_DIR}/lib/ParaView-prefix/src/ParaView-build
                        -DCMAKE_PREFIX_PATH=/usr/local/opt/qt #$(brew --prefix qt5)
    	    UPDATE_COMMAND ""
    	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
    	    INSTALL_COMMAND make install
    	    BUILD_IN_SOURCE 1
    	 )
endif()

if(BUILD_BOOST)
  if(${USE_MPI} AND ${MPI_FOUND})
    ExternalProject_Add(
      boost
      URL https://downloads.sourceforge.net/project/boost/boost/1.68.0/boost_1_68_0.tar.gz
      INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/boost
      CONFIGURE_COMMAND bash <SOURCE_DIR>/bootstrap.sh --prefix="${CMAKE_BINARY_DIR}/lib/boost" ${ICU} --without-libraries=python COMMAND echo "using mpi : ${MPI_CXX_COMPILER} : : ${MPIEXEC_EXECUTABLE} $<SEMICOLON>" >> ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/project-config.jam
      UPDATE_COMMAND ""
      BUILD_COMMAND ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/b2 -j ${EXTERNAL_BUILD_THREADS}
      INSTALL_COMMAND ./b2 install cxxflags=-std=c++14
      BUILD_IN_SOURCE 1
      )
  else()
    ExternalProject_Add(
      boost
      URL https://downloads.sourceforge.net/project/boost/boost/1.68.0/boost_1_68_0.tar.gz
      INSTALL_DIR ${CMAKE_BINARY_DIR}/lib/boost
      CONFIGURE_COMMAND bash <SOURCE_DIR>/bootstrap.sh --prefix="${CMAKE_BINARY_DIR}/lib/boost" ${ICU} --without-libraries=python
      UPDATE_COMMAND ""
      BUILD_COMMAND ${CMAKE_BINARY_DIR}/lib/boost-prefix/src/boost/b2 -j ${EXTERNAL_BUILD_THREADS}
      INSTALL_COMMAND ./b2 install cxxflags=-std=c++14
      BUILD_IN_SOURCE 1
      )
  endif()
endif()

if(BUILD_GSL)
    ExternalProject_Add(
	    gsl
	    URL ftp://ftp.gnu.org/gnu/gsl/gsl-2.4.tar.gz
	    CONFIGURE_COMMAND  <SOURCE_DIR>/configure --prefix=${CMAKE_BINARY_DIR}/lib/gsl
	    UPDATE_COMMAND ""
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1)
endif()

if(BUILD_ARMADILLO)
    ExternalProject_Add(
	    armadillo
	    URL http://sourceforge.net/projects/arma/files/armadillo-7.950.1.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/armadillo
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()
if(BUILD_VIENNACL)
    ExternalProject_Add(
	    ViennaCL
	    URL https://downloads.sourceforge.net/project/viennacl/1.7.x/ViennaCL-1.7.1.tar.gz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/ViennaCL -DENABLE_OPENCL=${USE_OCL} -DENABLE_CUDA=OFF -DENABLE_OPENMP=${USE_OMP} -DBUILD_EXAMPLES=OFF
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_CGAL)
    ExternalProject_Add(
	    CGAL
	    URL https://github.com/CGAL/cgal/releases/download/releases%2FCGAL-4.10/CGAL-4.10.tar.xz
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/CGAL -DBoost_NO_SYSTEM_PATHS=TRUE -DBOOST_ROOT=${CMAKE_BINARY_DIR}/lib/boost -DWITH_CGAL_Qt5=OFF
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    DEPENDS boost
	    )
    LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_BINARY_DIR}/lib/CGAL/lib64/CGAL")
endif()

if(BUILD_TBB)
 ExternalProject_Add(
	    tbb
	    GIT_REPOSITORY https://github.com/wjakob/tbb.git
	    UPDATE_COMMAND ""
	    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/tbb
	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_GDAL)

    ExternalProject_Add(
	    GDAL
	    DEPENDS proj4
	    URL http://download.osgeo.org/gdal/2.4.1/gdal-2.4.1.tar.gz

	    UPDATE_COMMAND ""
	    #PATCH_COMMAND patch -p1 < ${CMAKE_BINARY_DIR}/gdal-2.2.1.patch

	    #occasionally GDAL doesn't correctly detect this, so can enable if required by adding before the configure command
	    #http://osgeo-org.1560.x6.nabble.com/gdal-dev-sprintf-different-exception-specified-td5340324.html
	    # CXXFLAGS=-DDONT_DEPRECATE_SPRINTF

	    CONFIGURE_COMMAND <SOURCE_DIR>/configure  --prefix=${CMAKE_BINARY_DIR}/lib/gdal --with-static-proj4=${CMAKE_BINARY_DIR}/lib/proj4
                                                      --with-geos
                                                      --with-geotiff=internal
                                                      --with-hide-internal-symbols
                                                      --with-libtiff=internal
                                                      --with-libz=internal
                                                      --with-threads
                                                      --without-bsb
                                                      --without-cfitsio
                                                      --without-cryptopp
                                                      --without-curl
                                                      --without-ecw
                                                      --without-expat
                                                      --without-fme
                                                      --without-freexl
                                                      --without-gif
                                                      --without-gif
                                                      --without-gnm
                                                      --without-grass
                                                      --without-grib
                                                      --without-hdf4
                                                      --without-hdf5
                                                      --without-idb
                                                      --without-ingres
                                                      --without-jasper
                                                      --without-jp2mrsid
                                                      --without-jpeg
                                                      --without-kakadu
                                                      --without-libgrass
                                                      --without-libkml
                                                      --without-libtool
                                                      --without-mrf
                                                      --without-mrsid
                                                      --without-mysql
                                                      --without-netcdf
                                                      --without-odbc
                                                      --without-ogdi
                                                      --without-openjpeg
                                                      --without-pcidsk
                                                      --without-pcraster
                                                      --without-pcre
                                                      --without-perl
                                                      --without-pg
                                                      --without-png
                                                      --without-python
                                                      --without-qhull
                                                      --without-sde
                                                      --without-sqlite3
                                                      --without-webp
                                                      --without-xerces
                                                      --without-xml2
                                                      --without-crypto
                                                      --without-kea

	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )
endif()

if(BUILD_NETCDF)
    #even if netcdf-c and hdf are installed, there are some API changes and incompatibilities. It is easier to just build it all from scratch.

    #build HDF5 first
    ExternalProject_Add(
	    hdf5
	    URL https://s3.amazonaws.com/hdf-wordpress-1/wp-content/uploads/manual/HDF5/HDF5_1_10_4/hdf5-1.10.4.tar.gz

	    UPDATE_COMMAND ""
# If HDF5 is build with CMake, the wrong library is looked for when netcdf-cxx is build
# https://github.com/Unidata/netcdf-c/issues/712#issuecomment-430309449
       # CMAKE_ARGS  -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/hdf5
        #            -DHDF5_BUILD_CPP_LIB=ON
         #           -DBUILD_SHARED_LIBS=ON

        #-DALLOW_UNSUPPORTED=ON

       CONFIGURE_COMMAND bash  <SOURCE_DIR>/configure --prefix=${CMAKE_BINARY_DIR}/lib/hdf5 --enable-cxx --enable-shared

	    BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
	    INSTALL_COMMAND make install
	    BUILD_IN_SOURCE 1
	    )


        ExternalProject_Add(
            netcdf-c
            GIT_REPOSITORY https://github.com/Unidata/netcdf-c.git
            GIT_TAG 2c68546  #v4.6.1
            UPDATE_COMMAND ""
            DEPENDS hdf5


            # Only use autoreconf -if  on non-tagged git
            #CONFIGURE_COMMAND   ${CMAKE_BINARY_DIR}/lib/netcdf-c-prefix/src/netcdf-c/configure
            #          CPPFLAGS=-I${CMAKE_BINARY_DIR}/lib/hdf5/include
            #          LDFLAGS=-L${CMAKE_BINARY_DIR}/lib/hdf5/lib
            #          --prefix=${CMAKE_BINARY_DIR}/lib/netcdf-c
            #          --enable-netcdf-4 --enable-shared

          CMAKE_ARGS  -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}/lib/hdf5
                        -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/netcdf-c
                        -DENABLE_NETCDF_4=ON
                        -DBUILD_SHARED_LIBS=ON
                        -DENABLE_PARALLEL4=OFF
                        -DHDF5_HAS_COLL_METADATA_OPS=OFF

          # With 4.6.1, there appears to be a parallel make regression that causes, randomly compilation failure
          # https://github.com/Unidata/netcdf-c/issues/896#issuecomment-382823731
            BUILD_COMMAND make
            INSTALL_COMMAND make install
            BUILD_IN_SOURCE 1
        )


        ExternalProject_Add(
            netcdf-cxx
            GIT_REPOSITORY https://github.com/Unidata/netcdf-cxx4.git
            GIT_TAG 50c8b89 # v. 4.3.0
            UPDATE_COMMAND ""
            DEPENDS netcdf-c

            #install this to the netcdf directory as that's where the cmake findnetcdf script is going to look
            CMAKE_ARGS -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}/lib/netcdf-c
                        -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/lib/netcdf-c

            BUILD_COMMAND make -j${EXTERNAL_BUILD_THREADS}
            INSTALL_COMMAND make install
            BUILD_IN_SOURCE 1
        )


endif()
